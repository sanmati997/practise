Working with Text Editors in Linux
==================================
The default editor that comes with the UNIX operating system 
is called vi (visual editor). 

Using vi editor, we can edit an existing file or create a new file from scratch.

We can also use this editor to just read a text file.


Modes of Operation in vi editor 
+++++++++++++++++++++++++++++++++
There are three modes of operation in vi:

1) command mode
2) insert mode
3) escape mode

Command Mode: 
---------------
When vi starts up, it is in Command Mode. This mode is where vi interprets any characters we type as commands and thus does not display them in the window

This mode allows us to move through a file, and to delete, copy, or paste a piece of text.

To enter into Command Mode from any other mode, it requires pressing the [Esc] key. If we press [Esc] when we are already in Command Mode, then vi will beep or flash the screen.

Insert mode: 
--------------
This mode enables you to insert text into the file. 

Everything thatâ€™s typed in this mode is interpreted as input and finally, it is put in the file. 

The vi always starts in command mode. To enter text, you must be in insert mode.

To come in insert mode you simply type i. 
 
To get out of insert mode, press the Esc key, which will put you back into command mode.

Last Line Mode(Escape Mode): 
-----------------------------
Line Mode is invoked by typing a colon [:], while vi is in Command Mode. 

The cursor will jump to the last line of the screen and vi will wait for a command. 

This mode enables you to perform tasks such as saving files, executing commands.

There are following way you can start using vi editor :

Commands and their Description
---------------------------------
vi filename: Creates a new file if it already not exist, otherwise opens existing file.
vi -R filename : Opens an existing file in read only mode.
view filename : Opens an existing file in read only mode.


vi f1.txt

=> After making changes if we don't want to save those changes then execute :q!

Moving within a File(Navigation):
-----------------------------------
To move around within a file without affecting text must be in command mode (press Esc twice). Here are some of the commands can be used to move around one character at a time.

Commands and their Description
---------------------------------
k : Moves the cursor up one line.
j : Moves the cursor down one line.
h : Moves the cursor to the left one character position.
l : Moves the cursor to the right one character position.
0 or | : Positions cursor at beginning of line.
$ : Positions cursor at end of line.
W : Positions cursor to the next word.
B : Positions cursor to previous word.
( : Positions cursor to beginning of current sentence.
) : Positions cursor to beginning of next sentence.
H : Move to top of screen.
nH : Moves to nth line from the top of the screen.
M : Move to middle of screen.
L : Move to bottom of screen.
nL : Moves to nth line from the bottom of the screen.
colon along with x : Colon followed by a number would position the cursor on line number represented by x.


Usecase
-------
-> We will use 'vi' editor to perform below activities

a) To edit config files of our application
b) To edit shell script files





Working with SED command
------------------------
SED command in UNIX stands for stream editor and it can perform lots of functions on file like searching, find and replace, insertion or deletion.

Though most common use of SED command in UNIX is for substitution or for find and replace. 

By using SED you can edit files even without opening them, which is much quicker way to find and replace something in file, than first opening that file in VI Editor and then changing it.

SED is a powerful text stream editor. Can do insertion, deletion, search and replace(substitution).

SED command in unix supports regular expression which allows it perform complex pattern matching.

Example:
--------
$ cat > myfile.txt
unix is great os. unix is opensource. unix is free os.
learn operating system.
unix linux which one you choose.
unix is easy to learn.unix is a multiuser os. Learn unix. unix is a powerful.

Replacing or substituting string : 
----------------------------------
Sed command is mostly used to replace the text in a file. The below simple sed command replaces the word â€œunixâ€ with â€œlinuxâ€ in the file

$sed 's/unix/linux/' myfile.txt

By default, the sed command replaces the first occurrence of the pattern in each line and it wonâ€™t replace the second, thirdâ€¦occurrence in the line.

Replacing the nth occurrence of a pattern in a line : 
---------------------------------------------------
Use the /1, /2 etc flags to replace the first, second occurrence of a pattern in a line. The below command replaces the second occurrence of the word â€œunixâ€ with â€œlinuxâ€ in a line.

$sed 's/unix/linux/2' geekfile.txt

Replacing all the occurrence of the pattern in a line : 
----------------------------------------------
The substitute flag /g (global replacement) specifies the sed command to replace all the occurrences of the string in the line.

$ sed 's/unix/linux/g' myfile.txt

Deleting lines from a particular file 
-------------------------------------
SED command can also be used for deleting lines from a particular file. SED command is used for performing deletion operation without even opening the file

To Delete a particular line say n in this example
----------------------------------------------------
$ sed '5d' myfile.txt

To Delete a last line
-----------------------
$ sed '$d' myfile.txt


To Delete from nth to last line
---------------------------------
$ sed '12,$d' myfile.txt


Note: By default SED command changes will not store in file.

=> To make SED command changes to file permanently we will use '-i' optionn.

	$ sed -i 's/unix/linux/g' myfile.txt  

Note: With above command 'unix' keyword will be replaced with 'linux' keyword in the file permanently.


File permissions
================

To create a secure environment in Linux, you need to learn about user groups and permissions. For example, if you work in a company and you want the finance department to read a file but not make any modification to it, then you need to use permissions in Linux. It is a must for every programmer working with Linux nowadays.

Letâ€™s start by talking about the ownership of Linux files.

User: the owner of the file (person who created the file).

Group: the group can contain multiple users. 

Therefore, all users in that group will have the same permissions. It makes things easier than assign permission for every user you want.

Other: any person has access to that file, that person has neither created the file, nor are they in any group which has access to that file.

=> Execute 'ls -l' command to file's permissions


We will work with this part â€œ-rw-râ€“râ€“".

The characters mean:

â€˜râ€™ = read.
â€˜wâ€™ = write.
â€˜xâ€™ = execute.
â€˜-â€™ = no permission.

-rw-r--r--

-: It represents file
rw: User
r: Group
r: Other

As we see above, the empty first part means that it is a file. If it were a directory then it will be the letter â€œdâ€ instead. 

The second part means that the user â€œHomeâ€ has read and write permissions but he does not have the execute one.

The group and others have only the read permission.

Letâ€™s change the permissions using the chmod command.

=> chmod o+w section.txt

This command will add the write permission for other users to my text file â€œsection.txtâ€.

Now if you try to execute ls -l then you will see -rw-r--rw-

â€œoâ€ refers to others, â€œgâ€ for the group, â€œuâ€ for the user, and â€œaâ€ for all.

Now letâ€™s add the execute permission to the user with:

=> chmod u+x section.txt

The permissions will be -rwxr--rw-

If you want to remove the permission, you can use the same method but with â€œ-â€ instead of â€œ+â€. 

For example, letâ€™s remove the execute permission from the user by:

=> chmod u-x section.txt

And the permissions now are: -rw-r--rw-

Also, you can use Symbolic Mode to modify permissions like the following:


Number	Permission
0	No permission
1	Execute
2	Write
3	Execute and Write
4	Read
5	Read and Execute
6	Read and Write
7	Read, Write and Execute

For example, letâ€™s give every permission for all with:

=> chmod 777 section.txt

Then the permissions will be: -rwxrwxrwx.

Letâ€™s remove the execute from the group and the write from other by:

=> chmod 765 section.txt





Working with find and locate commands
----------------------------------------
The locate Command find will search for data in local db

$ sudo apt install mlocate

$ locate apache

$ locate -c apache

$ locate -c *.txt

$ locate -S (to see locate database)


2. Find Files Under Home Directory
# find /home -name f1.txt

7. Find Files With 777 Permissions
# find . -type f -perm 0777 -print

19. Find all Empty Files
# find /tmp -type f -empty

20. Find all Empty Directories
# find /tmp -type d -empty



Working with User Accounts
==========================
Create a user

=> sudo adduser testuser

After creating a new user and setting a password to it, you can log in in two ways:

By the terminal: su - testuser


Delete a user
=============
=> sudo userdel testuser

If you try that command, you will notice that the user directory has not been deleted and you need to delete it by yourself.

You can use this automated command to do everything for you:

sudo deluser --remove-home testuser


User groups
============
A group is a collection of users. The primary purpose of the groups is to define a set of privileges like read, write, or execute permission for a given resource that can be shared among the users within the group.

Create a group
---------------
You can see all of the groups you have by opening the following file:

You can see all of the groups you have by opening the following file:

cat /etc/group

Create a group
----------------

=> sudo groupadd section

Add user to a group
--------------------
sudo usermod -aG section testuser

-> verify user groups using command -> id username

Delete user from a group
-------------------------
sudo gpasswd -d testuser section

Delete a group
--------------
sudo groupdel section